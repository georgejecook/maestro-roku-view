import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/roku_modules/mc/Utils.brs"

namespace animations.utils
  function fadeTo(target, duration, toValue, start = true)
    anim = new animations.Fade(target, duration, target.opacity, toValue)
    if start
      anim.start()
    end if
    return anim
  end function

  function scaleTo(target, duration, toValue, start = true)
    anim = new animations.Scale(target, duration, target.scale, toValue)
    if start
      anim.start()
    end if
    return anim
  end function

  function moveTo(target, duration, toValue, start = true)
    anim = new animations.Move(target, duration, target.translation, toValue)
    if start
      anim.start()
    end if
    return anim
  end function

  function getDelta(fromValue, toValue)
    if mc.isPoint(fromValue) and mc.isPoint(toValue)
      return abs((fromValue[0] + fromValue [1]) - (toValue[0] + toValue[1]))
    else if mc.isNumber(fromValue) and mc.isNumber(toValue)
      return abs(fromValue - toValue)
    else
      return 0
    end if
  end function
end namespace

namespace animations
  class AnimationBase
    public node
    public repeat
    private parentAnimation

    function new(name, target)
      m.log = new log.Logger(name)
      if target = invalid or target.id = invalid or target.id = ""
        m.log.error("target must be a valid node with an id")
      end if
      m.target = target
    end function

    function setControl(control)
      m.control = control
      m.node.control = control
    end function

    function start(resume = false)
      m.setControl(resume ? "resume" : "start")
    end function

    function pause()
      m.setControl("pause")
    end function

    function stop(finish = false)
      m.setControl(finish ? "finish": "stop")
    end function

    function setRepeat(repeat)
      m.repeat = repeat
      m.node.repeat = repeat
    end function

    public function destroy()
      if m.node <> invalid
        m.node.getParent().removeChild(m.node)
      end if
    end function

  end class

  class AbstractAnimation extends AnimationBase
    public target
    public interpolator
    private keys = [0, 1]
    private keyValues = invalid
    private easeFunction = "linear"
    private delay = 0
    private field = invalid
    public duration = 0.5

    function new(target, field, duration, fromValue, toValue, name = "AbstractAnimation")
      super(name, target)
      if target = invalid or target.id = invalid or target.id = ""
        m.log.error("target must be a valid node with an id")
      end if

      m.target = target
      m.duration = duration
      m.fromValue = fromValue
      m.toValue = toValue
      m.field = field
      m.createAnimationNode()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setEaseFunction(easeFunction)
      m.easeFunction = easeFunction
      m.node.easeFunction = easeFunction
    end function

    function setKeys(keys, keyValues)
      if not mc.isArray(keys)
        m.log.error("received invalid keys", keys)
      end if
      if not mc.isArray(keyValues)
        m.log.error("received invalid keys", keyValues)
      end if
      if keys.count() <> keyValues.count()
        m.log.error("keys have different count from keyValues", keys.count(), keyValues.count())
      end if

      for each value in keyValues
        if not m.isValidValue(value)
          m.log.error("tried to set illegal value in keyValues value: ", value)
        end if
      end for
      m.interpolator.key = keys
      m.interpolator.keyValue = keyValues
    end function

    function setDuration(duration)
      m.node.duration = duration
      m.duration = duration
    end function

    function setDelay(delay)
      m.node.delay = delay
    end function

    function animateTo(toValue, duration = invalid)

      if m.node.control = "start" or m.node.control = "resume"
        wasPlaying = true
        m.pause()
      else
        wasPlaying = false
      end if

      if duration = invalid
        duration = m.duration
      end if
      m.setDuration(duration)
      m.setFromToValue(m.target[m.field], toValue)
      if wasPlaying = true
        m.start()
      end if
    end function

    ' /**
    '  * @member modifyAnimateTo
    '  * @memberof module:animations.AbstractAnimation
    '  * @instance
    '  * @function
    '  * @description estimates how much time is required to complete the animation given the current delta; particularly useful when having to switch destination on the fly.
    '  * @param {any} toValue - the final value
    '  * @param {float} stepSpeed - how long the animation would normally take
    '  * @param {string} stepUnit - "pixel" (30 pixels), "float", 1
    '  */
    function animateToWithSpeed(toValue, stepSpeed, stepUnit = "pixel")
      stepSize = stepUnit = "pixel" ? 30 : 0.1
      delta = animations.utils.getDelta(m.target[m.field], toValue)
      steps = delta / stepSize
      m.animateTo(toValue, steps * stepSpeed)
    end function

    function setFromToValue(fromValue, toValue)
      if m.isValidValue(toValue) and m.isValidValue(fromValue)
        m.fromValue = fromValue
        m.toValue = toValue
        ' m.log.info("fromValue", fromValue, "toValue", toValue)
        m.interpolator.keyValue = [fromValue, toValue]
      else
        m.log.error("tried to set invalid fromValue or toValue [", fromValue, ",", toValue, "]")
      end if
    end function

    function observeFraction(callback, scope = invalid)
      mc.tasks.observeNodeField(m.interpolator, "fraction", callback, "value", false, scope)
    end function

    function observeState(callback, scope = invalid)
      mc.tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveFraction()
      mc.tasks.cleanNodeObserver(m.interpolator, "fraction")
    end function

    function unobserveState()
      mc.tasks.cleanNodeObserver(m.node, "state")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ private impl
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createAnimationNode()
      m.node = createObject("roSGNode", "Animation")
      m.node.id = `${m.target.id}_${m.name}_${animations.getAnimationKeyId()}`
      m.node.duration = m.duration
      m.node.easeFunction = m.easeFunction
      m.node.repeat = m.repeat
      m.node.delay = m.delay
      m.target.appendChild(m.node)
      m.createInterpolator()
      m.node.appendChild(m.interpolator)
    end function

    private function createInterpolator()
      m.log.error("createAnimationNode must be implemented")
    end function

    function _createInterpolator(interpolatorType)
      m.interpolator = createObject("roSGNode", interpolatorType)
      m.interpolator.id = `${m.target.id}_${m.field}_ ${animations.getAnimationKeyId()}`
      m.interpolator.fieldToInterp = `${m.target.id}.${m.field}`
      m.setKeys([0, 1], [m.fromValue, m.toValue])
    end function

  end class

  class Parallel extends AnimationBase
    public animations

    function new(target, parallelAnimations = invalid, repeat = false)
      super("ParallelAnimation", target)
      m.node = createObject("roSGNode", "ParallelAnimation")
      m.node.id = `${m.target.id}_${m.name}_${animations.getAnimationKeyId()}`
      m.setRepeat(repeat)
      if parallelAnimations <> invalid
        m.addAnimations(parallelAnimations)
      end if
      m.target.appendChild(m.node)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function addAnimations(parallelAnimations)
      m.animations = []
      for each animation in parallelAnimations
        if animation <> invalid and type(animation.node) = "roSGNode"
          animation.parentAnimation = m.node
          m.node.appendChild(animation.node)
          m.animations.push(animation)
        end if
      end for
    end function

    public override function destroy()
      for each animation in parallelAnimations
        animation.destroy()
      end for
    end function

    function observeState(callback, scope = invalid)
      mc.tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveState()
      mc.tasks.cleanNodeObserver(m.node, "state")
    end function
  end class

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ animation subclasses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  class Scale extends AbstractAnimation
    function new(target, duration, fromValue, toValue)
      super(target, "scale", duration, fromValue, toValue, "ScaleAnimation")
    end function

    override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isPoint(value)
    end function
  end class

  class Fade extends AbstractAnimation
    function new(target, duration, fromValue, toValue)
      super(target, "opacity", duration, fromValue, toValue, "FadeAnimation")
    end function

    override function createInterpolator()
      m._createInterpolator("FloatFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isNumber(value) and value >= 0 and value <= 1
    end function
  end class

  class Move extends AbstractAnimation
    function new(target, duration, fromValue, toValue)
      super(target, "translation", duration, fromValue, toValue, "MoveAnimation")
    end function

    override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isPoint(value)
    end function
  end class

  class Size extends AbstractAnimation
    private wAnim
    private hAnim

    function new(target, duration, fromValue, toValue)
      super(target, "size", duration, fromValue, toValue, "SizeAnimation")
      m.wAnim = new animations.FloatValue(target, "width", duration, fromValue[0], toValue[0])
      m.hAnim = new animations.FloatValue(target, "height", duration, fromValue[1], toValue[1])
      m.pAnim = new animations.Parallel(target, [
        m.wAnim,
        m.hAnim
      ])
      m.node = m.pAnim.node

    end function

    private override function createAnimationNode()
    end function

    override function setEaseFunction(easeFunction)
      m.easeFunction = easeFunction
      m.wAnim.setEaseFunction(easeFunction)
      m.hAnim.setEaseFunction(easeFunction)
    end function

    override function setKeys(keys, keyValues)
      wKeys = []
      hKeys = []
      for each keyValue in keyValues
        wKeys.push(keyValue[0])
        hKeys.push(keyValue[1])
      end for
      m.wAnim.setKeys(keys, wKeys)
      m.hAnim.setKeys(keys, hKeys)

    end function

    override function setDuration(duration)
      m.wAnim.setDuration(duration)
      m.hAnim.setDuration(duration)
      m.duration = duration
    end function

    override function setDelay(delay)
      m.wAnim.setDelay(delay)
      m.hAnim.setDelay(delay)
    end function

    override function animateTo(toValue, duration = invalid)
      m.wAnim.animateTo(toValue[0], duration)
      m.hAnim.animateTo(toValue[1], duration)
    end function

    override function animateToWithSpeed(toValue, stepSpeed, stepUnit = "pixel")
      m.wAnim.animateToWithSpeed(toValue[0], stepSpeed, stepUnit)
      m.hAnim.animateToWithSpeed(toValue[1], stepSpeed, stepUnit)
    end function

    override function setFromToValue(fromValue, toValue)
      m.wAnim.setFromToValue(fromValue[0], toValue[1])
      m.hAnim.setFromToValue(fromValue[0], toValue[1])
    end function

    override function observeFraction(callback, scope = invalid)
      m.wAnim.observeFraction(callback, scope)
    end function

    override function unobserveFraction()
      m.wAnim.unobserveFraction()
    end function
    end class


  class FloatValue extends AbstractAnimation
    function new(target, field, duration, fromValue, toValue)
      super(target, field, duration, fromValue, toValue, "FloatAnimation")
    end function

    override function createInterpolator()
      m._createInterpolator("FloatFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isNumber(value)
    end function
  end class


  class VectorValue extends AbstractAnimation
    function new(target, field, duration, fromValue, toValue)
      super(target, field, duration, fromValue, toValue, "VectorValueAnimation")
    end function

    override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    override function isValidValue(value)
      return mc.isNumber(value)
    end function
  end class

  function getAnimationKeyId()
    if m.global.__manimKey = invalid
      m.global.addFields({ __manimKey: 0 })
    end if
    m.global.__manimKey++
  end function
end namespace