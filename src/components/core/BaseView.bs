import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/roku_modules/mc/Utils.brs"
import "pkg:/components/mixin/FocusMixin.bs"
import "pkg:/components/mixin/KeyMixin.bs"
import "pkg:/source/roku_modules/mc/Utils.brs"
import "pkg:/source/ViewUtils.bs"
import "pkg:/source/roku_modules/mioc/MIOC.brs"

' /**
'  * @module BaseView
'  * @description BaseView class for all controls or screens
'  */

function init() as void
  ? "initizlizing with name "; getViewName()
  log.registerLogger(getViewName())
  mioc.initialize()
  if m.global._mIocContainer <> invalid
    'TODO - I will probs import ioc into base view
    'bs:disable-next-line
  end if
  focusMixinInit()
  keyPressMixinInit()

  'TODO - guard these observers to not include in prod builds
  m.top.observeField("_debugM", mc.getFunctionName(onDebugMChange))
  m.top.observeField("_updateStyle", mc.getFunctionName(onUpdateStyleChange))

  m.wasShown = false
end function

function onDebugMChange()
  m.logInfo("dumping m for debugging purposes")
  mc.setOrAddNodeField(m.top, "_m", m)
  mc.setOrAddNodeField(m.top, "_vm", m.vm)
end function


' /**
'  * @member intializeView
'  * @memberof module:BaseView
'  * @instance
'  * @function
'  * @description initializes the passed in View
'  * @param {BaseView} the view to initialize
'  */
function initializeView(view, args = invalid) as void
  view@._initialize(args)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'** VISIBILITY
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onVisibleChange()
  'TODO - does the nav controller handle this in future?
  m.logInfo(m.top.id, "onVisibleChange visible ", m.top.visible)
  if m.top.visible
    _onShow(invalid)
  else
    _onHide(invalid)
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Lifecycle methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _onShow(args) as void
  ' ? ">> base VIEW _ONSHOW " ; m.top.id ; " isShown " ; m.top.isShown
  oldIsShowing = m.top.isShown
  if not m.top.isInitialized
    return
  end if
  m.top.isShown = true

  if not m.wasShown
    if mc.isFunction(onFirstShow)
      'bs:disable-next-line
      onFirstShow()
    end if
    m.wasShown = true

    if m.vm <> invalid and m.vm.onFirstShow <> invalid
      m.vm.onFirstShow()
    end if

  end if

  if oldIsShowing <> m.top.isShown
    if mc.isFunction(onShow)
      'bs:disable-next-line
      onShow()
    end if

    if m.vm <> invalid and m.vm.onShow <> invalid
      m.vm.onShow()
    end if

  end if
end function

function _onHide(args)
  if m.wasShown
    m.top.isShown = false
    if mc.isFunction(onHide)
      'bs:disable-next-line
      onHide()
    end if

    if m.vm <> invalid and m.vm.onHide <> invalid
      m.vm.onHide()
    end if

  else
    m.logWarn("onHide called before show: ignoring")
  end if
end function

function _initialize(args = invalid)
  m.logMethod("initialize")
  if not m.top.isInitialized
    m.top.isInitialized = true
    initialize(args)
    m.top.observeField("visible", mc.getFunctionName(onVisibleChange))
    if m.top.visible and not m.top.isShown
      _onShow(invalid)
    end if
  else
    m.logWarn("View was already initialized. Ignoring subsequent call ", m.top)
  end if
end function

function callVMFunc(funcName, p1 = "#M_NONE#", p2 = "#M_NONE#", p3 = "#M_NONE#")
  return mc.callAAFunc(m.vm, funcName, p1, p2, p3) 
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ styling support
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onUpdateStyleChange()
  'override me
  style = StyleBuilderUtils.getUpdatedControlStyle(m.top, true, true, true)
  style.comp = m.top.getSubType()
  m.top._styleText = formatJson(style)
end function

function onStyleTextChange()
  m.top._style = parseJson(m.top._styleText)
end function

function onStyleChange()
  m.logInfo("my style changed", m.top.subType())
  if m.top._style <> invalid
    StyleUtils.applyStyle(m.top._style.normal, m.top)
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ abstract lifecycle methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function initialize(args)
end function
