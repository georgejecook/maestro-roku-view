import "pkg:/source/roku_modules/log/LogMixin.brs"

function init()
  log_registerLogger("MultiContainer", true)
  m.layoutGroup = m.top.findNode("container_layoutGroup")
  m.updateTimer = m.top.findNode("container_updateTimer")
  m.animation = m.top.findNode("container_animation")
  m.interpolator = m.top.findNode("container_interpolator")
  m.previousY = 0

  m.top.observeField("index", "onIndexChange")
  m.top.observeField("size", "onSizeChange")
  m.top.observeField("children", "onChildrenChange")
  m.top.observeField("needsRecalulating", "onNeedsRecalcuatingChange")
  m.top.observeField("yOffsets", "onIndexChange")
  m.updateTimer.observeField("fire", "onNeedsRecalcuatingChange")
  m.previousCurrFocusRow = 1
  m.isFloatingFocusOffsetApplied = false
  m.rowListFloatingFocusPositionOffset = 0
  onSizeChange()
end function

function initialize(args)
  updateChildren()
end function

function updateChildren(newChildren = invalid)
  children = []
  m.updateTimer.control = "stop"

  if newChildren = invalid
    newChildren = m.top.getChildren(-1, 0)
  end if

  for each child in newChildren
    if child.id <> "container_layoutGroup" and child.id <> "container_animation" and child.id <> "container_updateTimer"
      children.push(child)
      if child.doesExist("currFocusRow")
        child.observeField("currFocusRow", "onHeroOffsetChildCurrFocusRowChange")
      end if

    end if
  end for

  m.layoutGroup.appendChildren(children)
  m.top.numChildren = children.count()
  m.top.index = 0
  onNeedsRecalcuatingChange()
  m.updateTimer.control = "start"
end function

function onHeroOffsetChildCurrFocusRowChange(event)
  'change override offset back to 0
  currFocusRow = event.getData()
  node = event.getroSGNode()
  delta = currFocusRow - m.previousCurrFocusRow
  m.previousCurrFocusRow = currFocusRow

  if delta < 0
    direction = -1
  else
    direction = 1
  end if

  if true or node.vertFocusAnimationStyle = "floatingFocus"
    'TODO guard this
    fixRowListPosition(node, direction, currFocusRow)
  end if

  ' log_logVerbose("currFocus Row", currFocusRow, "node.itemFocused", node.itemFocused, "delta", delta, "direction", direction, "animationDirection", m.animationDirection)

  if node.doesExist("isHeroOffsetApplied")
    ' log_logInfo("currFocusChange", currFocusRow, "offsetRequired", node.isHeroOffsetApplied = true, "animationDirection", m.animationDirection)
    if node.isHeroOffsetApplied = false and currFocusRow >= 0 and currFocusRow < 1 and direction = -1
      node.isHeroOffsetApplied = true
      log_logVerbose("ADDING HERO")

      moveToCurrentIndex()

    else if node.isHeroOffsetApplied = true and currFocusRow < 1 and direction = 1
      log_logVerbose("REMOVING HERO")
      node.isHeroOffsetApplied = false
      moveToCurrentIndex()
    end if
  end if
end function

function fixRowListPosition(rowlist, direction, currFocusRow)
  if m.rowListFloatingFocusPositionOffset <> 0 and direction = 1 and not m.isFloatingFocusOffsetApplied and currFocusRow > 1.5 and currFocusRow < 2.5
    ' ? "applying fix"
    m.isFloatingFocusOffsetApplied = true
    newY = getYOfIndex(m.top.index) - m.rowListFloatingFocusPositionOffset
    moveContentTo(m.previousY, newY)
  else if direction = -1 and currFocusRow < 1.5 
    ' ? "removing fix"
    m.isFloatingFocusOffsetApplied = false
    newY = getYOfIndex(m.top.index)
    moveContentTo(m.previousY, newY)
  end if
end function

function onSizeChange()
  setClippingRectangle()
end function


function setClippingRectangle()
  child = m.layoutGroup.getChild(m.top.index)
  clippingOffsets = invalid
  if child <> invalid
    clippingOffsets = child.containerClippingOffsets
  end if

  if clippingOffsets = invalid
    clippingOffsets = [0, 0, 0, 0]
  end if

  m.top.clippingRect = [clippingOffsets[0], clippingOffsets[1], m.top.size[0] + clippingOffsets[2], m.top.size[1] + clippingOffsets[3]]
end function

function onChildrenChange()
  m.layoutGroup.removeChildren(m.layoutGroup.getChildren(-1, 0))
  updateChildren(m.top.children)
  onIndexChange()
  onSizeChange() 
end function

function onIndexChange()
  log_logMethod("onIndexChange", m.top.index, "isAnimated", m.top.isAnimated)
  child = m.layoutGroup.getChild(m.top.index)

  if child = invalid
    log_logWarn("tried to set index before the children were created")
    return invalid
  end if

  setClippingRectangle()

  if child.heroControl <> invalid and child.itemFocused <> invalid and child.itemFocused < 1
    m.previousCurrFocusRow = 1
    child.isHeroOffsetApplied = true
  end if

  ' log_logVerbose("child.isHeroOffsetApplied", child.isHeroOffsetApplied)
  moveToCurrentIndex()

  if m.top.isFocused or m.top.isChildFocused
    setFocus(child)
  end if

end function

function moveToCurrentIndex(forceNoAnimation = false)
  newY = getYOfIndex(m.top.index)
  if newY < m.layoutGroup.translation[1]
    m.animationDirection = 1
  else
    m.animationDirection = -1
  end if

  ' log_logInfo("index", m.top.index, "new Y is", newY, "force no animation", forceNoAnimation, "animationDirection", m.animationDirection)

  moveContentTo(m.previousY, newY) 
  m.previousY = newY
end function

function moveContentTo(previousY, newY, forceNoAnimation = false)
  if m.top.isAnimated and not forceNoAnimation
    if m.animation.state = "running"
      m.animation.control = "pause"
    end if

    m.interpolator.keyValue = [[0, m.previousY], [0, newY]]

    if m.animation.control = "pause"
      m.animation.control = "start"
    else
      m.animation.control = "resume"
    end if

  else
    ' log_logInfo("moving with no animation")
    m.layoutGroup.translation = [0, newY]
  end if

end function

function getYOfIndex(index)
  y = 0
  currentOffset = 0
  ' log_logVerbose("index", index)
  child = m.layoutGroup.getchild(index)

  if child <> invalid and child.heroControl <> invalid and child.isHeroOffsetApplied
    ' log_logVerbose("child is hero with offset applied")
    ' log_logVerbose(">>> adding child hero height", child.heroControl.boundingRect().height)
    currentOffset += - child.heroControl.boundingRect().height
  else 
    if index < m.top.yOffsets.count()
      currentOffset -= m.top.yOffsets[index]
    else
      if m.top.yOffsets.count() > 0
        currentOffset -= m.top.yOffsets[m.top.yOffsets.count() - 1]
      end if
    end if

  end if

  ' log_logVerbose(">> offsets", m.top.yOffsets)

  for i = 0 to index - 1
    ' log_logVerbose(">>> ", index, " currentOffset ", currentOffset)

    child = m.layoutGroup.getChild(i)

    if child <> invalid
      ' log_logVerbose(" child height si ", child.boundingRect().height)
      y += child.boundingRect().height
    else
      ' log_logWarn("child of MultiContainer with index", i, "is invalid")
    end if
  end for

  y += currentOffset
  return - y
end function

function onNeedsRecalcuatingChange()
  log_logInfo("onNeedsRecalcuatingChange - recalcuating multi container")
  y = 0
  heroControl = invalid
  m.rowListFloatingFocusPositionOffset = 0

  for each child in m.layoutGroup.getChildren(-1, 0)
    'TODO observe the bounds.. not gonna be fun.. :(
    child.translation = [0, y]
    y += child.boundingRect().height

    MU.setOrAddNodeField(child, "heroControl", heroControl) 
    MU.setOrAddNodeField(child, "isHeroOffsetApplied", child.isHeroOffsetApplied = true) 
    MU.setOrAddNodeField(child, "_multiContainer", m.top) 

    if child.isHero = true
      heroControl = child
    else
      heroControl = invalid
    end if

    if m.rowListFloatingFocusPositionOffset = 0 and child.rowListFloatingFocusPositionOffset <> invalid and child.rowListFloatingFocusPositionOffset <> 0
      m.rowListFloatingFocusPositionOffset = child.rowListFloatingFocusPositionOffset
    end if
  end for

end function

function onGainedFocus(isSelfFocused)
  ' log_logMethod("onGainedFocus", isSelfFocused)

  if isSelfFocused
    ' onIndexChange()
    child = m.layoutGroup.getChild(m.top.index)
    if child <> invalid
      setFocus(child)
    end if
  end if
end function
