'Note this file is intentionally _not_ namespaced


' /**
'  * @module FocusMixin
'  * @description Mixin methods for managing focus
'  */

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ FOCUS
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' /**
'  * @member initializeFocusManager
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description creates the FocusManager, used by the FocusMixin. This method should be called early on in your app initializatoin (e.g in the init method of your AppController, or similar class)
'  * @param {global} - globalNode pointer to globalNode (i.e. m.global)
'  */
function initializeFocusManager(globalNode, isLogging = false)
  focusManager = createObject("roSGNode", "FocusManager")
  globalNode.addFields({ "focusManager": focusManager })
  focusManager.isLogging = isLogging
end function

' /**
'  * @member focusMixinInit
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description creates required observers for a view. Call this from any view that uses FocusMixin (which does not extend `BaseView`)
'  */
function focusMixinInit()
  m.top.observeFieldScoped("isFocused", "onIsFocusedChange")
  m.top.observeFieldScoped("isChildFocused", "onIsChildFocusedChange")
end function

' /**
'  * @member setFocus
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description sets focus on the passed in node. Will do nothing if the node is invalid, undefined, or not currently on the scene.
'  * @param {roSGNode} node - node to set focus on
'  * @param {boolean} forceSet - will set focus, even if the focus lock is on
'  */
function setFocus(node, forceSet = false)
  m.global.focusManager@._setFocusOn(node, forceSet)
end function

'*************************************************************
'** unsetFocus
'** abstracts focus un setting to make it easier to debug
'** @param node as roSGNode - to set focus to
'*************************************************************
' /**
'  * @member unsetFocus
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description there are rare; but valid occasions where one might call node.setFocus. This method is provided as a abstratoin, to facilitate better debugging
'  * @param {roSGNode} node - node to unsset focus on
'  */
function unsetFocus(node)
  m.global.focusManager@._unsetFocusOn(node)
end function

' /**
'  * @member setFocusLocked
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description toggles if the focus is locked. If the focus is locked, then any call to setFocus will not work.
'  * @param {boolean} - isLocked
'  * @param {string} - focusLockReason - the reason for locking - this will appear in m.log.ging output
'  */
function setFocusLocked(node, focusLockReason = "")
  m.global.focusManager@._setFocusLocked(node, focusLockReason)
end function

function onIsFocusedChange()
  if m.global.focusManager.isLogging
    m.log.verbose("m.top.isFocused", m.top.isFocused, mc.dv(m.top))
  end if

  if m.top.isFocused
    onGainedFocus(true)
  else
    onLostFocus()
  end if
end function

function onIsChildFocusedChange()
  if m.global.focusManager.isLogging
    m.log.verbose("m.top.isChildFocused", m.top.isChildFocused, mc.dv(m.top))
  end if

  if m.top.isChildFocused
    onGainedFocus(false)
  else
    'we dont' notify about this
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ abstract focus methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' /**
'  * @member onGainedFocus
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description invoked when a control, or a parent of a focused control, gains focus
'  * @param {boolean} isSelfFocused - if true, then this is the control that is focused, if false, then it is one of the control's parents
'  */
function onGainedFocus(isSelfFocused)
  if m.global.focusManager.isLogging
    m.log.info("onGainedFocus", m.top.subType(), isSelfFocused)
  end if

  if isSelfFocused and m.vm <> invalid

    if m.vm.onGainedFocus <> invalid
      m.vm.onGainedFocus(isSelfFocused)
    end if

    if mc.isFunction(mx_onFocusIdChange) <> invalid
      'bs:disable-next-line
      mx_onFocusIdChange(m.vm.focusId)
    end if

  end if
end function

' /**
'  * @member onGainedFocus
'  * @memberof module:FocusMixin
'  * @instance
'  * @function
'  * @description invoked when a control, loses focus
'  */
function onLostFocus()
  if m.global.focusManager.isLogging
    m.log.info("lost focus:", m.top.subType(), ".", m.top.id)
  end if
  if m.vm <> invalid and m.vm.onLostFocus <> invalid
    m.vm.onLostFocus()
  end if
end function

